#!/usr/bin/env ruby

# *******************************************************************************
# OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC.
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# (1) Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# (2) Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# (3) Neither the name of the copyright holder nor the names of any contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission from the respective party.
#
# (4) Other than as required in clauses (1) and (2), distributions in any form
# of modifications or other derivative works may not use the "OpenStudio"
# trademark, "OS", "os", or any other confusingly similar designation without
# specific prior written permission from Alliance for Sustainable Energy, LLC.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE UNITED STATES
# GOVERNMENT, OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# *******************************************************************************

::Signal.trap('INT') {abort}

require 'optparse'
require 'pathname'
require 'json'

# Set up options parsing
argv = ARGV.dup
options = {
    debug: false,
    port: 27017
}
opts = ::OptionParser.new do |o|
  o.banner = 'Usage: mongo_command [options] LOG_DIR INVOCATION_DIR DB_DIR STATE_FILE PROJECT_DIR'
  o.separator ''
  o.separator 'LOG_DIR: Absolute path of directory to write the mongod log to'
  o.separator 'INVOCATION_DIR: Absolute path of directory to invoke mongod from'
  o.separator 'DB_DIR: Absolute path of directory for the mongod instance database'
  o.separator 'STATE_FILE: Absolute path to write the mongod PID to'
  o.separator 'PROJECT_DIR: Absolute path to the PAT project DIRECTORY to write logs to'
  o.separator ''
  o.on('-p', '--port NUMBER', 'Port to start mongod on, defaults to 27017') {|p| options[:port] = p}
  o.on('-d', '--debug', 'Print debugging information to STDOUT') {|_| options[:debug] = true}
end

# Parse arguments and verify them
opts.parse!(argv)
log_dir = argv.shift
invocation_dir = argv.shift
db_dir = argv.shift
state_file = argv.shift
project_dir = argv.shift
inputs_empty = log_dir.nil? | invocation_dir.nil? | db_dir.nil? | state_file.nil? | project_dir.nil?
if inputs_empty
  puts 'LOG_DIR, INVOCATION_DIR, DB_DIR, STATE_FILE, and PROJECT_DIR are all required for execution'
  exit(1)
end
error_msg = ''
error_msg << "The LOG_DIR provided, `#{log_dir}`, is not absolute. " unless Pathname.new(log_dir).absolute?
error_msg << "The INVOCATION_DIR provided, `#{invocation_dir}`, is not absolute. " unless Pathname.new(invocation_dir).absolute?
error_msg << "The DB_DIR provided, `#{db_dir}`, is not absolute. " unless Pathname.new(db_dir).absolute?
error_msg << "The STATE_FILE projvided, `#{state_file}`, is not absolute. " unless Pathname.new(state_file).absolute?
error_msg << "The PROJECT_DIR provided, `#{project_dir}`, is not absolute. " unless Pathname.new(project_dir).absolute?
unless error_msg.empty?
  puts error_msg
  exit 2
end
error_msg << "The LOG_DIR provided, `#{log_dir}`, does not exist on the file system. " unless Dir.exist? log_dir
error_msg << "The INVOCATION_DIR provided, `#{invocation_dir}`, does not exist on the file system. " unless Dir.exist? invocation_dir
error_msg << "The DB_DIR provided, `#{db_dir}`, does not exist on the file system. " unless Dir.exist? db_dir
error_msg << "The PROJECT_DIR provided, `#{project_dir}`, does not exist on the file system. " unless Dir.exist? project_dir
unless error_msg.empty?
  puts error_msg
  exit 3
end

# Create the system call to use
::Dir.chdir(File.absolute_path(invocation_dir))
sys_call = " --port #{options[:port]} --logpath \"#{log_dir}/mongo.log\" --dbpath \"#{db_dir}\""
if Gem.win_platform? || ENV['OS'] == 'Windows_NT'
  sys_call = 'mongod.exe' + sys_call
else
  sys_call = './mongod' + sys_call
end
puts "System call will be: '#{sys_call}' in directory '#{Dir.pwd}'" if options[:debug]

# Execute the system call
process_log = File.join(project_dir, 'logs', 'mongod.log')
if options[:debug]
  mongod_pid = spawn(sys_call)
else
  mongod_pid = spawn(sys_call, [:err, :out] => [process_log, 'w'])
end
config_hash = File.exist?(state_file) ? ::JSON.parse(File.read(state_file), symbolize_names: true) : {}
config_hash[:mongod_pid] = mongod_pid
::File.open(state_file, 'wb') {|f| f << ::JSON.pretty_generate(config_hash)}
