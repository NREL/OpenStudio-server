#!/usr/bin/env ruby

######################################################################
#  Copyright (c) 2008-2016, Alliance for Sustainable Energy.
#  All rights reserved.
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
######################################################################

::Signal.trap('INT') { abort }

require 'optparse'
require 'pathname'
require 'json'

# Set up options parsing
argv = ARGV.dup
options = {
  debug: false,
  port: 27017
}
opts = ::OptionParser.new do |o|
  o.banner = 'Usage: mongo_command [options] LOG_DIR INVOCATION_DIR DB_DIR STATE_FILE PROJECT_DIR'
  o.separator ''
  o.separator 'LOG_DIR: Absolute path of directory to write the mongod log to'
  o.separator 'INVOCATION_DIR: Absolute path of directory to invoke mongod from'
  o.separator 'DB_DIR: Absolute path of directory for the mongod instance database'
  o.separator 'STATE_FILE: Absolute path to write the mongod PID to'
  o.separator 'PROJECT_DIR: Absolute path to the PAT project DIRECTORY to write logs to'
  o.separator ''
  o.on('-p', '--port NUMBER', 'Port to start mongod on, defaults to 27017') { |p| options[:port] = p }
  o.on('-d', '--debug', 'Print debugging information to STDOUT') { |_| options[:debug] = true }
end

# Parse arguments and verify them
opts.parse!(argv)
log_dir = argv.shift
invocation_dir = argv.shift
db_dir = argv.shift
state_file = argv.shift
project_dir = argv.shift
inputs_empty = log_dir.nil? | invocation_dir.nil? | db_dir.nil? | state_file.nil? | project_dir.nil?
puts 'LOG_DIR, INVOCATION_DIR, DB_DIR, STATE_FILE, and PROJECT_DIR are all required for execution' && exit(1) if inputs_empty
error_msg = ''
error_msg << "The LOG_DIR provided, `#{log_dir}`, is not absolute. " unless Pathname.new(log_dir).absolute?
error_msg << "The INVOCATION_DIR provided, `#{invocation_dir}`, is not absolute. " unless
  Pathname.new(invocation_dir).absolute?
error_msg << "The DB_DIR provided, `#{db_dir}`, is not absolute. " unless Pathname.new(db_dir).absolute?
error_msg << "The STATE_FILE projvided, `#{state_file}`, is not absolute. " unless Pathname.new(state_file).absolute?
error_msg << "The PROJECT_DIR provided, `#{project_dir}`, is not absolute. " unless Pathname.new(project_dir).absolute?
puts error_msg && exit(2) unless error_msg.empty?
error_msg << "The LOG_DIR provided, `#{log_dir}`, does not exist on the file system. " unless Dir.exist? log_dir
error_msg << "The INVOCATION_DIR provided, `#{invocation_dir}`, does not exist on the file system. " unless
  Dir.exist? invocation_dir
error_msg << "The DB_DIR provided, `#{db_dir}`, does not exist on the file system. " unless Dir.exist? db_dir
error_msg << "The PROJECT_DIR provided, `#{project_dir}`, does not exist on the file system. " unless
  Dir.exist? project_dir
puts error_msg && exit(3) unless error_msg.empty?

# Create the system call to use
::Dir.chdir(File.absolute_path(invocation_dir))
sys_call = " --port #{options[:port]} --logpath \"#{log_dir}/mongo.log\" --dbpath \"#{db_dir}\""
if RUBY_PLATFORM == [/bccwin/i, /cygwin/i, /djgpp/i, /mingw/i, /mswin/i, /wince/i] || ENV['OS'] == 'Windows_NT'
  sys_call = 'mongod.exe' + sys_call
else
  sys_call = './mongod' + sys_call
end
puts "System call will be: '#{sys_call}' in directory '#{Dir.pwd}'" if options[:debug]

# Execute the system call
process_log = File.join(project_dir, 'logs', 'mongod.log')
if options[:debug]
  mongod_pid = spawn(sys_call)
else
  mongod_pid = spawn(sys_call, [:err, :out] => [process_log, 'w'])
end
config_hash = File.exist?(state_file) ? ::JSON.parse(File.read(state_file), symbolize_names: true) : {}
config_hash[:mongod_pid] = mongod_pid
::File.open(state_file, 'wb') { |f| f << ::JSON.pretty_generate(config_hash) }
