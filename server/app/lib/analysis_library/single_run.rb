# *******************************************************************************
# OpenStudio(R), Copyright (c) Alliance for Sustainable Energy, LLC.
# See also https://openstudio.net/license
# *******************************************************************************

class AnalysisLibrary::SingleRun < AnalysisLibrary::Base
  def initialize(analysis_id, analysis_job_id, options = {})
    # Setup the defaults for the Analysis.  Items in the root are typically used to control the running of
    #   the script below and are not necessarily persisted to the database.
    #   Options under problem will be merged together and persisted into the database.  The order of
    #   preference is objects in the database, objects passed via options, then the defaults below.
    #   Parameters posted in the API become the options hash that is passed into this initializer.
    defaults = ActiveSupport::HashWithIndifferentAccess.new(
      skip_init: false,
      run_data_point_filename: 'run_openstudio_workflow.rb',
      problem: {
        algorithm: {
          number_of_samples: 1,
          sample_method: 'all_variables',
          debug_messages: 0,
          failed_f_value: 1e18,
          objective_functions: [],
          seed: nil
        }
      }
    )
    @options = defaults.deep_merge(options)

    @analysis_id = analysis_id
    @analysis_job_id = analysis_job_id
  end

  # Perform is the main method that is run in the background.  At the moment if this method crashes
  # it will be logged as a failed delayed_job and will fail after max_attempts.
  def perform
    @analysis = Analysis.find(@analysis_id)

    # get the analysis and report that it is running
    @analysis_job = AnalysisLibrary::Core.initialize_analysis_job(@analysis, @analysis_job_id, @options)

    # reload the object (which is required) because the subdocuments (jobs) may have changed
    @analysis.reload

    logger.info "Initializing analysis for #{@analysis.name} with UUID of #{@analysis.uuid}"

    selected_variables = Variable.pivots(@analysis.id) + Variable.variables(@analysis.id)
    logger.info "Found #{selected_variables.count} variables to perturb"

    # generate the probabilities for all variables as column vectors
    grouped = {}
    samples = {}
    var_types = []

    # get the probabilities
    logger.info "Found #{selected_variables.count} variables"

    i_var = 0
    selected_variables.each do |var|
      logger.info "var: #{var.to_s}"
      #logger.info "sampling variable #{var.name} for measure #{var.measure.name}"  #var.measure no longer guarenteed with UrbanOpt variables
      variable_samples = nil
      # TODO: would be nice to have a field that said whether or not the variable is to be discrete or continuous.
      if var.uncertainty_type == 'discrete'
        variable_samples = var.static_value
        var_types << 'discrete'
      else
        variable_samples = var.static_value
        var_types << 'continuous'
      end

      # always add the data to the grouped hash even if it isn't used
      #grouped[var.measure.id.to_s] = {} unless grouped.key?(var.measure.id)
      #grouped[var.measure.id.to_s][var.id.to_s] = variable_samples

      # save the samples to the
      samples[var.id.to_s] = variable_samples

      var.r_index = i_var + 1 # r_index is 1-based
      var.save!

      i_var += 1
    end

    logger.info "Samples are #{samples}"

    dp_name = 'Single Run Autogenerated'
    dp = @analysis.data_points.new(name: dp_name)
    dp.set_variable_values = samples
    dp.save!

    # This is here mainly for testing, but feel free to really use it.
    @analysis.results[@options[:analysis_type]] = { last_message: 'completed successfully' }
    @analysis.save!

    # Only set this data if the analysis was NOT called from another analysis
    unless @options[:skip_init]
      @analysis_job.end_time = Time.now
      @analysis_job.status = 'completed'
      @analysis_job.save!
      @analysis.reload
    end
    @analysis.save!

    logger.info "Finished running analysis '#{self.class.name}'"
  end

  # Since this is a delayed job, if it crashes it will typically try multiple times.
  # Fix this to 1 retry for now.
  def max_attempts
    1
  end
end
