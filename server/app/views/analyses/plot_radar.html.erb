<%
# *******************************************************************************
# OpenStudio(R), Copyright (c) 2008-2016, Alliance for Sustainable Energy, LLC.
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# (1) Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# (2) Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# (3) Neither the name of the copyright holder nor the names of any contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission from the respective party.
#
# (4) Other than as required in clauses (1) and (2), distributions in any form
# of modifications or other derivative works may not use the "OpenStudio"
# trademark, "OS", "os", or any other confusingly similar designation without
# specific prior written permission from Alliance for Sustainable Energy, LLC.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE UNITED STATES
# GOVERNMENT, OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# *******************************************************************************
%>

<%= javascript_tag do %>
  datapoint_id = '<%= j @datapoint.id %>';
<% end %>
<h2>Analysis Results &mdash; <%= link_to @analysis.display_name, analysis_path(@analysis) %></h2>

<% if @datapoint.status != 'completed' %>
  <p>Datapoint <%= link_to(@datapoint.name, data_point_path(@datapoint.id)) %> has not completed.  There are no results available yet.</p>
<% else %>

  <h3> Results for datapoint: <%= link_to(@datapoint.name, data_point_path(@datapoint.id)) %></h3>

  <div id="radar-div">
    <script>
      var w = 500,
       h = 500;

      var colorscale = d3.scale.category10();

      //Legend titles
      var LegendOptions = ['Relative Error (%)'];

      //Data
      var rawdata;
      var chartdata = [];
      var data = [];
      var dp_values = {};

      d3.json("analysis_data.json?visualize=true&datapoint_id=" + datapoint_id ,  function (rawdata) {

       //variables holds the axes names
        Object.keys(rawdata['variables']).forEach(function (d) {

          dp_values = {};

          // only get the ones with obj function target not null
          if ((typeof rawdata['variables'][d]['objective_function_target'] !== 'undefined') && (rawdata['variables'][d]['objective_function_target'] !== null))
          {

            dp_values['axis'] = d;
            dp_values['value'] = Math.abs(rawdata['data'][0][d] - rawdata['variables'][d]['objective_function_target']) / rawdata['variables'][d]['objective_function_target'];

            // add to data array
            data.push(dp_values);
          }

        });

        // extra array needed for structure
        chartdata.push(data);

      //Options for the Radar chart, other than default
      var mycfg = {
        w: w,
        h: h,
        maxValue: 0.6,
        levels: 6,
        ExtraWidthX: 300
      }

      //Call function to draw the Radar chart
      //Will expect that data is in %'s

      RadarChart.draw("#radar-div", chartdata, mycfg);

      ////////////////////////////////////////////
      /////////// Initiate legend ////////////////
      ////////////////////////////////////////////

      var svg = d3.select('#radar-div')
        .selectAll('svg')
        .append('svg')
        .attr("width", w+300)
        .attr("height", h)

      //Initiate Legend
      var legend = svg.append("g")
        .attr("class", "legend")
        .attr("height", 100)
        .attr("width", 200)
        .attr('transform', 'translate(90,20)')
        ;
        //Create colour squares
        legend.selectAll('rect')
          .data(LegendOptions)
          .enter()
          .append("rect")
          .attr("x", w - 65)
          .attr("y", function(d, i){ return i * 20;})
          .attr("width", 10)
          .attr("height", 10)
          .style("fill", function(d, i){ return colorscale(i);})
          ;
        //Create text next to squares
        legend.selectAll('text')
          .data(LegendOptions)
          .enter()
          .append("text")
          .attr("x", w - 52)
          .attr("y", function(d, i){ return i * 20 + 9;})
          .attr("font-size", "11px")
          .attr("fill", "#737373")
          .text(function(d) { return d; })
          ;

              })
      </script>

    </div>

<% end %>



