<h2>Analysis Results &mdash;  <%= link_to @analysis.display_name, analysis_path(@analysis) %></h2>
  <%= javascript_tag do %>
    hide_vars = <%=raw @variables.to_json %>;
  <% end %>

  <div id="graph-div">
      <script>
          //size of chart
          var m = [230, 20, 50, 20],
              w = 1220 - m[1] - m[3],
              h = 1000 - m[0] - m[2];

      var x = d3.scale.ordinal().rangePoints([0, w], 1),
              y = {},
              dragging = {};

      var line = d3.svg.line().defined(function (d) {
                  return d[1] != null;
              }),
              axis = d3.svg.axis().orient("left"),
              axis = d3.svg.axis().ticks(5).tickFormat(d3.format(".2e")).orient("left"),
              axisCategorical = d3.svg.axis().orient("left"),
              background,
              foreground;

      var svg = d3.select("#graph-div").append("svg:svg")
              .attr("width", w + m[1] + m[3])
              .attr("height", h + m[0] + m[2])
              .append("svg:g")
              .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

      d3.json("plot_data_v2.json", function (error, data) {
          // Extract the list of dimensions and create a scale for each.
          x.domain(dimensions = d3.keys(data['data'][0]).filter(function (d) {

              // To ignore always
              if ((d === "shading_height_above_window.shading_height_above_window_final") || (d === "_id") || (d === "name") || (d === "data_point_uuid") || (d === "location.location_final")) return false;

              // To filter out (from form)
            if ($.inArray(d, hide_vars) == -1) return false;

              // handle String datatype
              // handle Bool datatype
              if ((data['variables'][d]['data_type'] === 'string') || (data['variables'][d]['data_type'] === 'bool') || (data['variables'][d]['data_type'] === 'String') || (data['variables'][d]['data_type'] === 'Bool')) {
                  console.log("This is a string or bool: " + d + ", " + data['variables'][d]['data_type'])
                  y[d] = d3.scale.ordinal()
                          .domain(data['data'].map(function (p) {
                              return p[d];
                          }))
                          .rangePoints([h, 0]);
              }
              else if ((data['variables'][d]['value_type'] === 'string') || (data['variables'][d]['value_type'] === 'bool') || (data['variables'][d]['value_type'] === 'String') || (data['variables'][d]['value_type'] === 'Bool')) {
                  console.log("This is a string or bool: " + d + ", " + data['variables'][d]['value_type'])
                  y[d] = d3.scale.ordinal()
                          .domain(data['data'].map(function (p) {
                              return p[d];
                          }))
                          .rangePoints([h, 0]);
              }

              else {
                  y[d] = d3.scale.linear()
                          .domain(d3.extent(data['data'], function (p) {
                              return p[d];
                          }))
                          .range([h, 0]);
              }

              return true;
          }));

          // Add grey background lines for context.
          background = svg.append("svg:g")
                  .attr("class", "background")
                  .selectAll("path")
                  .data(data['data'])
                  .enter().append("svg:path")
                  .attr("d", path);

          // Add blue foreground lines for focus.
          foreground = svg.append("svg:g")
                  .attr("class", "foreground")
                  .selectAll("path")
                  .data(data['data'])
                  .enter().append("svg:path")
                  .attr("d", path);

          // Add a group element for each dimension.
          var g = svg.selectAll(".dimension")
                  .data(dimensions)
                  .enter().append("svg:g")
                  .attr("class", "dimension")
                  .attr("transform", function (d) {
                      return "translate(" + x(d) + ")";
                  })
                  .call(d3.behavior.drag()
                          .on("dragstart", function (d) {
                              dragging[d] = this.__origin__ = x(d);
                              background.attr("visibility", "hidden");
                          })
                          .on("drag", function (d) {
                              dragging[d] = Math.min(w, Math.max(0, this.__origin__ += d3.event.dx));
                              foreground.attr("d", path);
                              dimensions.sort(function (a, b) {
                                  return position(a) - position(b);
                              });
                              x.domain(dimensions);
                              g.attr("transform", function (d) {
                                  return "translate(" + position(d) + ")";
                              })
                          })
                          .on("dragend", function (d) {
                              delete this.__origin__;
                              delete dragging[d];
                              transition(d3.select(this)).attr("transform", "translate(" + x(d) + ")");
                              transition(foreground)
                                      .attr("d", path);
                              background
                                      .attr("d", path)
                                      .transition()
                                      .delay(500)
                                      .duration(0)
                                      .attr("visibility", null);
                          }));

          // Add an axis and title.
          g.append("svg:g")
                  .attr("class", "axis")
                  .each(function (d) {
                      if ((data['variables'][d]['data_type'] === 'string') || (data['variables'][d]['data_type'] === 'bool') || (data['variables'][d]['data_type'] === 'String') || (data['variables'][d]['data_type'] === 'Bool')) {
                          d3.select(this).call(axisCategorical.scale(y[d]));
                      }
                      else if ((data['variables'][d]['value_type'] === 'string') || (data['variables'][d]['value_type'] === 'bool') || (data['variables'][d]['value_type'] === 'String') || (data['variables'][d]['value_type'] === 'Bool')) {
                          d3.select(this).call(axisCategorical.scale(y[d]));
                      }
                      else {
                          d3.select(this).call(axis.scale(y[d]));
                      }

                  })
                  .append("svg:text")
                  .attr("text-anchor", "start")
                  .attr("y", -9)
                  .attr("transform", "rotate(-45)")
                  .text(String);

          // Add and store a brush for each axis.
          g.append("svg:g")
                  .attr("class", "brush")
                  .each(function (d) {
                      d3.select(this).call(y[d].brush = d3.svg.brush().y(y[d]).on("brush", brush));
                  })
                  .selectAll("rect")
                  .attr("x", -8)
                  .attr("width", 16);


      });
      function position(d) {
          var v = dragging[d];
          return v == null ? x(d) : v;
      }

      function transition(g) {
          return g.transition().duration(500);
      }

      // Returns the path for a given data point.
      function path(d) {
          return line(dimensions.map(function (p) {
              // check for undefined values
              if (d[p] == " " || d[p] == null) return [x(p), null];

              console.log(d[p])
              return [position(p), y[p](d[p])];
          }));
      }

      // Handles a brush event, toggling the display of foreground lines.
      function brush() {
          var actives = dimensions.filter(function (p) {
                      return !y[p].brush.empty();
                  }),
                  extents = actives.map(function (p) {
                      return y[p].brush.extent();
                  });
          foreground.style("display", function (d) {
              return actives.every(function (p, i) {
                  return extents[i][0] <= d[p] && d[p] <= extents[i][1];
              }) ? null : "none";
          });
      }

  </script>

</div>

<div id="chart-form">
  <div class="chart-text">
    <p>Unselect variables below to remove them from the chart</p>

    <div class="update-button">
      <button type="button" id="check_all">
        Check / Uncheck All
      </button>
    </div>
    <div class="row-fluid">
      <%= form_tag("/analyses/#{@analysis.id}/plot_parallelcoordinates") do %>
          <div class="span4">

            <% @visualizes.each_with_index do |var, index| %>
                <% if @visualizes.count/3.floor == index or @visualizes.count/3*2.floor == index %>
                    </div>
                    <div class="span3">
                <% end %>

                <p>
                  <% if @variables.nil? or (!@variables.nil? and @variables.include?(var.name)) %>
                      <% checked_str = true %>
                  <% else %>
                      <% checked_str = false %>
                  <% end %>
                  <%= check_box_tag "variables[]", var.name, checked_str, :id => "variables_#{index}" %>
                  <%= label_tag("variables_#{index}", var.display_name) %>
                </p>
            <% end %>
            <p>

            <div class="submit-form"> <%= submit_tag "Update Chart" %>  </div>
            </p>
            </div>
      <% end %>

    </div>
  </div>
</div>

<script type='text/javascript'>
    var toggle = false;

    $('#check_all').on("click", function () {
        if (toggle == true) {
            $('input:checkbox').prop('checked', true);
            toggle = false;
        }
        else {
            $('input:checkbox').prop('checked', false);
            toggle = true;
        }
        console.log($('input:checkbox'));
    });
</script>


</br>



