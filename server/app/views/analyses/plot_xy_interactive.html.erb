<%
# *******************************************************************************
# OpenStudio(R), Copyright (c) 2008-2016, Alliance for Sustainable Energy, LLC.
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# (1) Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# (2) Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# (3) Neither the name of the copyright holder nor the names of any contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission from the respective party.
#
# (4) Other than as required in clauses (1) and (2), distributions in any form
# of modifications or other derivative works may not use the "OpenStudio"
# trademark, "OS", "os", or any other confusingly similar designation without
# specific prior written permission from Alliance for Sustainable Energy, LLC.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE UNITED STATES
# GOVERNMENT, OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# *******************************************************************************
%>

<h2>Analysis Results &mdash; <%= link_to @analysis.display_name, analysis_path(@analysis) %></h2>

<% if @plot_data %>
  <div id="xy-div">
    <p>There are no results for this analysis.</p>
  </div>
<% else %>

  <%= javascript_tag do %>
    variables = <%=raw @variables.to_json %>;
    pareto_points = <%= raw @pareto_data_points.to_json %>;
  <% end %>

  
  <div class="row">
    <div class="span8">
      <div id="xy-div">

      </div>
    </div>
    <div class="span5">
      <%= form_tag("/analyses/#{@analysis.id}/plot_xy_interactive") do  %>
      <div class="well">
        <h3>Update Chart</h3>
        <p class="p-chart">Select x and y variables to update the chart</p>
        <table class="edittable">
          <tr>
            <td><%= label_tag("variables[x]", "X") %></td>
            <td><%= select_tag "variables[x]", options_from_collection_for_select(@plotvars, :name, :name, @variables.first) %></td>
          </tr>
          <tr>
            <td><%= label_tag("variables[y]", "Y") %></td>
            <td><%= select_tag "variables[y]", options_from_collection_for_select(@plotvars, :name, :name, @variables.last) %></td>
          </tr>
        </table>
        <div class="submit-form"> <%= submit_tag "Update Chart", class: 'btn btn-primary' %></div>
      </div>
      

      <div class="well">
        <h3>Pareto Front</h3>
        <% unless @pareto %>
          <p class="p-chart">Calculate Pareto Front for selected X and Y variables.</p>
          <div class="submit-form"><%= submit_tag "Calculate Pareto Front", class: 'btn btn-primary' %> </div>

        <% end %>
        <% if @pareto %>
          <p class="p-chart">Save this pareto front for later use</p>
          <%#= form_tag("/analysis/#{@analysis.id}/plot_xy_interactive") do %>
           <table class="edittable">
            <tr>
             <td> <%= label_tag("x_var_disp", "X") %></td>
             <td> <%= text_field_tag "x_var_disp", @variables[0], disabled: true, size: 45 %></td>
            </tr>
            <tr>
              <td><%= label_tag("y_var_disp", "Y") %></td>
              <td><%= text_field_tag "y_var_disp", @variables[1], disabled: true, size: 45 %></td>
            </tr>
            <tr>
              <td><%= label_tag("name", "Name") %></td>
              <td><%= text_field_tag "name", nil, size: 45 %></td>
            </tr>
            <%= hidden_field_tag "data_points", @pareto_data_points %>
            <%= hidden_field_tag "x_var", @variables[0] %>
            <%= hidden_field_tag "y_var", @variables[1] %>
 
          </table>
          <div class="submit-form"> <%= submit_tag "Save Pareto Front", class: 'btn btn-primary' %></div>
        <% end %>
        <% if @saved_paretos.count > 0 %>
          <div class="well">
          <h4>Saved Pareto Fronts for this Analysis</h4>
          <table class="table table-striped">
            <tr>
              <th>Name</th>
              <th>Actions</th>
            </tr>
            <% @saved_paretos.each do |p| %> 
              <tr>
                <td><%= p.name %></td>
                <td><%= link_to 'XY Plot', plot_xy_interactive_analysis_path(@analysis, pareto: p.id) %>
                | <%= link_to 'Parallel Plot', plot_parallelcoordinates_analysis_path(@analysis, pareto: p.id) %>
                | <%= link_to 'Edit', pareto_path(p.id) %>
                </td>
              </tr>
            <% end %>
          </table>
          <div style="text-align:right"><%= link_to 'Manage Saved Paretos', analysis_paretos_path(@analysis), class: 'btn btn-primary' %></div>
          </div>
        <% end %>

      </div>
      <% end %> <!-- end form -->
    </div>
  </div>
 
  </div>

  <div>
    <% if @debug %>
    <% if @pareto_pts %>
      <% @pareto_pts.each do |p| %>
        <%= p[@variables[0]] %>, <%= p[@variables[1]] %> | <%= p['_id'] %><br/>
      <% end %>
    <% end %>
    <% end %>
  </div>

  <script>

  var margin = {top: 20, right: 30, bottom: 50, left: 50},
      width = 750 - margin.left - margin.right + 1,
      height = 600 - margin.top - margin.bottom - 1;


  var color = d3.scale.category10();

  var series_select = 0;

  var tooltip = d3.select("#xy-div")
      .append("div")
      .attr("class", "tooltip")
      .style("opacity", 0)

  var svg = d3.select("#xy-div").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  d3.json(encodeURI("analysis_data.json?visualize=true"), function (error, data) {


    // Compute the series names ("y1", "y2", etc.) from the loaded CSV.
    var seriesNames = new Array();
    seriesNames.push('xy');
    //pareto?
    if (pareto_points.length > 0) seriesNames.push('pareto');

    
    // Map the data to an array of arrays of {x, y} tuples.
    var series = new Array();

    // Map the data to an array of arrays of {x, y} tuples.
    var serie = data['data'].map(function(d) {
      return {x: d[variables[0]], y: d[variables[1]], id: d['_id']};
    });
    series.push(serie);

    //add pareto series
    if (pareto_points.length > 0) {
      serie = data['data'].map(function(d) {
        if (pareto_points.indexOf(d['_id']) > -1){
          return {x: d[variables[0]], y: d[variables[1]], id: d['_id']}; 
        }
      });
      //clean array
      serie = serie.filter(function(n){ return n != undefined });
      series.push(serie);
    }

    var x = d3.scale.linear()
        .range([0, width]);

    var y = d3.scale.linear()
        .range([height, 0]);

                // Compute the scalesâ€™ domains.
    x.domain(d3.extent(d3.merge(series), function(d) { return d.x; })).nice();
    y.domain(d3.extent(d3.merge(series), function(d) { return d.y; })).nice();


    // Add the x-axis.
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.svg.axis().scale(x).orient("bottom"));
   
    // Add the y-axis.
    svg.append("g")
        .attr("class", "y axis")
        .call(d3.svg.axis().scale(y).orient("left"));

    // Add the points for all series!
    svg.selectAll(".series")
        .data(series)
      .enter().append("g")
        .attr("class", function(d,i) { 
          //series_select = i;
          return 'series_' + i ; 
        })
        //.style("fill", function(d, i) { return color(i); })
        .style("fill", color(0))
      .selectAll(".point")
        .data(function(d) { return d; })
      .enter().append("circle")
        .attr("class", "dot")
        .attr("r", 4.5)
        .attr("cx", function(d, i) { return x(d.x);  })
        .attr("cy", function(d) { return y(d.y); })
      
        .on("click", function (d) {
          tooltip.transition().duration(200).style("opacity", .9);
          return tooltip.style("left", (d3.event.pageX - 190) + "px")
              .style("top", (d3.event.pageY - 60) + "px")
              .html("X: " + d.x.toFixed(2) +
                  "</br>Y: " + d.y.toFixed(2) +
                  "</br><a href=/data_points/" + d.id + ">View Data Point</a>");
        }); 

     
      if (pareto_points.length > 0) {
        // make all points smaller
        svg.selectAll('g.series_0 circle.dot')
          .attr('r', 3);

        // Add super cool transitions on pareto points!
        svg.selectAll('g.series_1 circle.dot')
          .transition()
          .duration(5)
          .attr('r', 10)
          .style("fill", color(1))
          .style('opacity', 0.3);
        
        // draw legend
        var legend = svg.selectAll(".legend")
            .data(color.domain())
          .enter().append("g")
            .attr("class", "legend")
            .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

        // draw legend colored rectangles
        legend.append("rect")
            .attr("x", width - 18)
            .attr("width", 18)
            .attr("height", 18)
            .style("fill", color);

        // draw legend text
        legend.append("text")
            .attr("x", width - 24)
            .attr("y", 9)
            .attr("dy", ".35em")
            .style("text-anchor", "end")
            .text(function(d, i) { 
              if (i == 0) return 'All'
              else return 'Pareto Front' 
            })

        //More transitions!
        svg.selectAll('g.series_1 circle.dot')
          .transition()
          .delay(5)
          .duration(2000)
          .ease('linear')
          .attr('r', 4.5)
          .style('opacity', 1.0);     

        // plus fade in text
        text.transition()
                .delay(3000)
                .duration(1000)
                .style('opacity', 1)
         ;
  
      }

    });

</script>


<% end %>




