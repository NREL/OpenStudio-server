<%
# *******************************************************************************
# OpenStudio(R), Copyright (c) 2008-2016, Alliance for Sustainable Energy, LLC.
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# (1) Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# (2) Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# (3) Neither the name of the copyright holder nor the names of any contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission from the respective party.
#
# (4) Other than as required in clauses (1) and (2), distributions in any form
# of modifications or other derivative works may not use the "OpenStudio"
# trademark, "OS", "os", or any other confusingly similar designation without
# specific prior written permission from Alliance for Sustainable Energy, LLC.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE UNITED STATES
# GOVERNMENT, OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# *******************************************************************************
%>

<h2>Analysis Results &mdash; <%= link_to @analysis.display_name, analysis_path(@analysis) %></h2>
<style>

    svg {
        font: 10px sans-serif;
        padding: 10px;
    }

    .axis,
    .frame {
        shape-rendering: crispEdges;
    }

    .axis line {
        stroke: #ddd;
    }

    .axis path {
        display: none;
    }

    .frame {
        fill: none;
        stroke: #aaa;
    }

    circle {
        fill-opacity: .7;
    }

    circle.hidden {
        fill: #ccc !important;
    }

    .extent {
        fill: #000;
        fill-opacity: .125;
        stroke: #fff;
    }

</style>

<% if @plot_data %>
    <div id="graph-div">
      <p>There are no results for this analysis.</p>
    </div>
<% else %>

    <div id="graph-div">
      <script>
          var width = 960,
                  size = 150,
                  padding = 19.5;

          var x = d3.scale.linear()
                  .range([padding / 2, size - padding / 2]);

          var y = d3.scale.linear()
                  .range([size - padding / 2, padding / 2]);

          var xAxis = d3.svg.axis()
                  .scale(x)
                  .orient("bottom")
                  .ticks(5);

          var yAxis = d3.svg.axis()
                  .scale(y)
                  .orient("left")
                  .ticks(5);

          var color = d3.scale.category10();

          d3.json("analysis_data.json?visualize=true", function (error, data) {
              var domainByTrait = {},
                      traits = d3.keys(data['data'][0]).filter(function (d) {
                          return d !== "wwr_west_static" && d !== "data_point_uuid";
                      }),
                      n = traits.length;

              traits.forEach(function (trait) {
                  domainByTrait[trait] = d3.extent(data['data'], function (d) {
                      return d[trait];
                  });
              });

              xAxis.tickSize(size * n);
              yAxis.tickSize(-size * n);

              var brush = d3.svg.brush()
                      .x(x)
                      .y(y)
                      .on("brushstart", brushstart)
                      .on("brush", brushmove)
                      .on("brushend", brushend);

              var svg = d3.select("#graph-div").append("svg")
                      .attr("width", size * n + padding)
                      .attr("height", size * n + padding)
                      .append("g")
                      .attr("transform", "translate(" + padding + "," + padding / 2 + ")");

              svg.selectAll(".x.axis")
                      .data(traits)
                      .enter().append("g")
                      .attr("class", "x axis")
                      .attr("transform", function (d, i) {
                          return "translate(" + (n - i - 1) * size + ",0)";
                      })
                      .each(function (d) {
                          x.domain(domainByTrait[d]);
                          d3.select(this).call(xAxis);
                      });

              svg.selectAll(".y.axis")
                      .data(traits)
                      .enter().append("g")
                      .attr("class", "y axis")
                      .attr("transform", function (d, i) {
                          return "translate(0," + i * size + ")";
                      })
                      .each(function (d) {
                          y.domain(domainByTrait[d]);
                          d3.select(this).call(yAxis);
                      });

              var cell = svg.selectAll(".cell")
                      .data(cross(traits, traits))
                      .enter().append("g")
                      .attr("class", "cell")
                      .attr("transform", function (d) {
                          return "translate(" + (n - d.i - 1) * size + "," + d.j * size + ")";
                      })
                      .each(plot);

              // Titles for the diagonal.
              cell.filter(function (d) {
                  return d.i === d.j;
              }).append("text")
                      .attr("x", padding)
                      .attr("y", padding)
                      .attr("dy", ".71em")
                      .text(function (d) {
                          return d.x;
                      });

              cell.call(brush);

              function plot(p) {
                  var cell = d3.select(this);

                  x.domain(domainByTrait[p.x]);
                  y.domain(domainByTrait[p.y]);

                  cell.append("rect")
                          .attr("class", "frame")
                          .attr("x", padding / 2)
                          .attr("y", padding / 2)
                          .attr("width", size - padding)
                          .attr("height", size - padding);

                  cell.selectAll("circle")
                          .data(data['data'])
                          .enter().append("circle")
                          .attr("cx", function (d) {
                              return x(d[p.x]);
                          })
                          .attr("cy", function (d) {
                              return y(d[p.y]);
                          })
                          .attr("r", 3)
                          .style("fill", function (d) {
                              return color(d.species);
                          });
              }

              var brushCell;

              // Clear the previously-active brush, if any.
              function brushstart(p) {
                  if (brushCell !== this) {
                      d3.select(brushCell).call(brush.clear());
                      x.domain(domainByTrait[p.x]);
                      y.domain(domainByTrait[p.y]);
                      brushCell = this;
                  }
              }

              // Highlight the selected circles.
              function brushmove(p) {
                  var e = brush.extent();
                  svg.selectAll("circle").classed("hidden", function (d) {
                      return e[0][0] > d[p.x] || d[p.x] > e[1][0]
                              || e[0][1] > d[p.y] || d[p.y] > e[1][1];
                  });
              }

              // If the brush is empty, select all circles.
              function brushend() {
                  if (brush.empty()) svg.selectAll(".hidden").classed("hidden", false);
              }

              function cross(a, b) {
                  var c = [], n = a.length, m = b.length, i, j;
                  for (i = -1; ++i < n;) for (j = -1; ++j < m;) c.push({x: a[i], i: i, y: b[j], j: j});
                  return c;
              }

              d3.select(self.frameElement).style("height", size * n + padding + 20 + "px");
          });

      </script>

    </div>

<% end %>
</br>



