<%
# *******************************************************************************
# OpenStudio(R), Copyright (c) 2008-2016, Alliance for Sustainable Energy, LLC.
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# (1) Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# (2) Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# (3) Neither the name of the copyright holder nor the names of any contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission from the respective party.
#
# (4) Other than as required in clauses (1) and (2), distributions in any form
# of modifications or other derivative works may not use the "OpenStudio"
# trademark, "OS", "os", or any other confusingly similar designation without
# specific prior written permission from Alliance for Sustainable Energy, LLC.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE UNITED STATES
# GOVERNMENT, OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# *******************************************************************************
%>

<%= javascript_tag do %>
  datapoint_id = '<%= j @datapoint.id %>';
<% end %>
<h2>Analysis Results &mdash; <%= link_to @analysis.display_name, analysis_path(@analysis) %></h2>

<% if @datapoint.status != 'completed' %>
  <p>Datapoint <%= link_to(@datapoint.name, data_point_path(@datapoint.id)) %> has not completed.  There are no results available yet.</p>
<% else %>

  <h3> Results for datapoint: <%= link_to(@datapoint.name, data_point_path(@datapoint.id)) %></h3>

    <p>Relative percent error of the actual values of the selected objective functions with respect to their target values.  Negative values indicate an actual value smaller than its target value.</p>
    <div id="bar-div">

      <script type="text/javascript">
        var w = 1100,
            h = 780;

        var colorscale = d3.scale.category10();

        var rawdata, dp_values;
        var bardata = [];

        d3.json("analysis_data.json?visualize=true&datapoint_id=" + datapoint_id , function (rawdata) {

          Object.keys(rawdata['variables']).forEach(function (d) {

            dp_values = [];

            // only get the ones with obj function target not null
            if ((typeof rawdata['variables'][d]['objective_function_target'] !== 'undefined') && (rawdata['variables'][d]['objective_function_target'] !== null))
            {

              dp_values.push(rawdata['variables'][d]['name']);
              dp_values.push(Math.round((rawdata['data'][0][d] - rawdata['variables'][d]['objective_function_target']) / rawdata['variables'][d]['objective_function_target'] * 1000)/10);

              // add to data array
              bardata.push(dp_values);
            }

          });

          console.log(bardata)

          d3.select("#bar-div")
            .datum(bardata)
            .call(columnChart()
                .width(w)
                .height(h)
                .x(function(d, i) { return d[0]; })
                .y(function(d, i) { return d[1]; }));

        });

        function columnChart() {
          var margin = {top: 30, right: 50, bottom: 150, left: 50},
              width = 420,
              height = 420,
              xRoundBands = 0.2,
              xValue = function(d) { return d[0]; },
              yValue = function(d) { return d[1]; },
              xScale = d3.scale.ordinal(),
              yScale = d3.scale.linear(),
              yAxis = d3.svg.axis().scale(yScale).orient("left").tickFormat(function(d) { return d + " %"; }),
              xAxis = d3.svg.axis().scale(xScale);

          function chart(selection) {
            selection.each(function(data) {

              // Convert data to standard representation greedily;
              // this is needed for nondeterministic accessors.
              data = data.map(function(d, i) {
                return [xValue.call(data, d, i), yValue.call(data, d, i)];
              });

              // Update the x-scale.
              xScale
                  .domain(data.map(function(d) { return d[0];} ))
                  .rangeRoundBands([0, width - margin.left - margin.right], xRoundBands);


              // Update the y-scale.
              yScale
                  .domain(d3.extent(data.map(function(d) { return d[1];} )))
                  .range([height - margin.top - margin.bottom, 0])
                  .nice();

              // Select the svg element, if it exists.
              var svg = d3.select(this).selectAll("svg").data([data]);

              // Otherwise, create the skeletal chart.
              var gEnter = svg.enter().append("svg").append("g");
              gEnter.append("g").attr("class", "bars");
              gEnter.append("g").attr("class", "y axis");
              gEnter.append("g")
                  .attr("class", "x axis")

                  .attr("transform", "translate(0," + height + ")")
                  .call(xAxis)
                  .selectAll("text")
                  .attr("transform", "rotate(40, -10, 10)") ;

              gEnter.append("g").attr("class", "x axis zero");

              // Update the outer dimensions.
              svg .attr("width", width)
                  .attr("height", height);

              // Update the inner dimensions.
              var g = svg.select("g")
                  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

              // Update the bars.
              var bar = svg.select(".bars").selectAll(".bar").data(data);
              bar.enter().append("rect");
              bar.exit().remove();
              bar .attr("class", function(d, i) { return d[1] < 0 ? "bar negative" : "bar positive"; })
                  .attr("x", function(d) { return X(d); })
                  .attr("y", function(d, i) { return d[1] < 0 ? Y0() : Y(d); })
                  .attr("width", xScale.rangeBand())
                  .attr("height", function(d, i) { return Math.abs( Y(d) - Y0() ); });

              // x axis at the bottom of the chart
              g.select(".x.axis")
                  .attr("transform", "translate(0," + (height - margin.top - margin.bottom ) + ")")
                  .call(xAxis.orient("bottom"));


              // zero line
              g.select(".x.axis.zero")
                  .attr("transform", "translate(0," + Y0() + ")")
                  .call(xAxis.tickFormat("").tickSize(0));

              // Update the y-axis.
              g.select(".y.axis")
                  .call(yAxis);

            });
          }

          // The x-accessor for the path generator; xScale ∘ xValue.
          function X(d) {
            return xScale(d[0]);
          }

          function Y0() {
            return yScale(0);
          }

          // The x-accessor for the path generator; yScale ∘ yValue.
          function Y(d) {
            return yScale(d[1]);
          }

          chart.margin = function(_) {
            if (!arguments.length) return margin;
            margin = _;
            return chart;
          };

          chart.width = function(_) {
            if (!arguments.length) return width;
            width = _;
            return chart;
          };

          chart.height = function(_) {
            if (!arguments.length) return height;
            height = _;
            return chart;
          };

          chart.x = function(_) {
            if (!arguments.length) return xValue;
            xValue = _;
            return chart;
          };

          chart.y = function(_) {
            if (!arguments.length) return yValue;
            yValue = _;
            return chart;
          };

          return chart;
        }





      </script>

    </div>

<% end %>

