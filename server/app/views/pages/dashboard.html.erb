<%
  # *******************************************************************************
  # OpenStudio(R), Copyright (c) Alliance for Sustainable Energy, LLC.
  # See also https://openstudio.net/license
  # *******************************************************************************
%>

<!-- vars for javascript -->
<%= javascript_tag do %>
    statuses = <%= raw @js_res.to_json %>;
    total = <%= raw @total.to_json %>;
<% end %>

<div class="row-fluid gray-header">
  <div class="span3"><h2>Dashboard</h2></div>
  <div class="span2">
    <div class="large_text"><%= link_to "#{@projects.count} Projects", projects_path %> </div>
  </div>
  <div class="span2">
    <div class="large_text"><%= link_to "#{@analyses.count} Analyses", analyses_path %> </div>
  </div>
  <div class="span2">
    <div class="large_text"><%= @completed_perc %>% Completed</div>
  </div>
  <div class="span2">
    <div class="large_text"><%= @failed_perc %>% Failed</div>
  </div>
</div>

<div class="row-fluid">
  <div class="span12">
    <div class="analysis-container">
      <div class="analysis-content">
        <% if @current %>
        <div class="analysis-header">Current Analysis: <h3><%= link_to(@current.display_name, analysis_path(@current)) %></h3></div>

        <div class="row-fluid pad-top-20">
          <div class="span6">

         <h4 style="text-align:left;">Progress Status</h4>
          <div id="pie" class="pie"></div>
          </div>
          <div class="span6 pad-top-20">

            <p>Project: <%= link_to(@current.project.name, project_path(@current.project)) %></p>
            <p>Start:
              <% unless @current.start_time.nil? %><%= @current.start_time.strftime("%m/%d/%Y %H:%M:%S") %>
              <% end %>
            </p>
            <p><% unless @current.end_time.nil? %>End: <%= @current.end_time.strftime("%m/%d/%Y %H:%M:%S") %><% end %></p>
            <p><% unless @current.end_time.nil? || @current.start_time.nil? %>Duration:  <%= distance_of_time_in_words(@current.start_time, @current.end_time) %> <% end %></p>
            <p>Status: <span class="label <% if @current.status == 'completed' %>label-success<% end %>"><%=@current.status %></span></p>
            <p><span class="badge badge-info"><%= @current.data_points.count %></span> Datapoints</p>
            <p>
              <% if @current.status == 'completed' %>
                  <% fails = @current.data_points.where(status_message: 'datapoint failure').count %>
                  <span class="badge
                  <% if fails > 0 %>badge-warning <% else %>badge-info<% end %>">
                  <% if fails == 0 %>0<% else %> <%= fails %><% end %>
                  </span> Failures
              <% end %>
            </p>
            <div class="row-fluid pad-top-20">
              <div class="span3 offset3">
                <div class="button-container">
                  <%= link_to 'View Analysis', analysis_path(@current), class: "btn btn-mini" %>
                </div>
              </div>
              <div class="span3">
                <div class="button-container">
                  <% if @current.status == 'started' %>
                      <td><%= link_to 'Stop Analysis', stop_analysis_path(@current), data: { confirm: 'Are you sure?' }, class: "btn btn-mini" %></td>
                  <% else %>
                      <td><%= link_to 'Delete Project', project_path(@current.project), method: :delete, data: {confirm: 'Are you sure?'}, class: "btn btn-mini" %></td>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        </div>
        <% else %>
          <p>There are no analyses to display</p>
        <% end %>
      </div>
    </div>
  </div>
</div>



<% @analyses.each_with_index do |res, index| %>
  <% next if index == 0 %>
  <div class="row-fluid">
    <div class="span12">
      <div class="analysis-container">
        <div class="analysis-content">
          <div class="row-fluid">
            <div class="span3">
              <p><h3><%= link_to(res.display_name, analysis_path(res)) %></h3></p>

            </div>
            <div class="span3">
              <p>Project: <%= link_to(res.project.name, project_path(res.project)) %></p>
              <p>Start:<% unless res.start_time.nil? %><%= res.start_time.strftime("%m/%d/%Y %H:%M:%S") %><% end %></p>
              <p>End: <% unless res.end_time.nil? %><%= res.end_time.strftime("%m/%d/%Y %H:%M:%S") %><% end %></p>
              <p>Duration: <%= distance_of_time_in_words(res.start_time, res.end_time) unless res.start_time.nil? || res.end_time.nil? %></p>

            </div>
            <div class="span3">
              <p>Status: <span class="label <% if res.status == 'completed' %>label-success<% end %>"><%=res.status %></span></p>
              <p><span class="badge badge-info"><%= res.data_points.count %></span> Datapoints</p>

              <p>
                <% fails = res.data_points.where(status_message: 'datapoint failure').count %>
                <span class="badge
                <% if fails > 0 %>badge-warning <% else %>badge-info<% end %>">
                <% if fails == 0 %>0<% else %> <%= fails %><% end %>
                </span> Failures
              </p>
            </div>
            <div class="span3">
              <div class="button-container">
                <%= link_to 'View Analysis', analysis_path(res), class: "btn btn-mini" %>
              </div>
              <div class="button-container">
                <% if res.status == 'started' %>
                    <td><%= link_to 'Stop Analysis', stop_analysis_path(res.project), data: { confirm: 'Are you sure?' }, class: "btn btn-mini" %></td>
                <% else %>
                    <td><%= link_to 'Delete Project', project_path(res.project), method: :delete, data: {confirm: 'Are you sure?'}, class: "btn btn-mini" %></td>
                <% end %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
<% end %>

  <script type="text/javascript">
      function make_pie_chart(data, cnt) {
          var w = 230,                        //width
                  h = 230,                            //height
                  r = 110,                            //radius
                  radius = 115,                          //to center on svg
                  color = d3.scale.category20();     //builtin range of colors

          var vis = d3.select("#pie")
                  .append("svg:svg")              //create the SVG element inside the <body>
                  .data([data])                   //associate our data with the document
                  .attr("width", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag
                  .attr("height", h)
                  .append("svg:g")                //make a group to hold our pie chart
                  .attr("transform", "translate(" + radius + "," + radius + ")")    //move the center of the pie chart from 0, 0 to radius, radius

          var arc = d3.svg.arc()              //this will create <path> elements for us using arc data
                  .outerRadius(r);

          var pie = d3.layout.pie()           //this will create arc data for us given a list of values
                  .value(function (d) {
                      return d.value;
                  });    //we must tell it out to access the value of each element in our data array

          var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
                  .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)
                  .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
                  .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
                  .attr("class", "slice");    //allow us to style things in the slices (like text)

          arcs.append("svg:path")
                  .attr("fill", function (d, i) {
                      return color(i);
                  }) //set the color for each slice to be chosen from the color function defined above
                  .attr("d", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function

          //arcs.append("svg:text")                                     //add a label to each slice
          //    .attr("transform", function(d) {                    //set the label's origin to the center of the arc
          //      //we have to make sure to set these before calling arc.centroid
          //      d.innerRadius = 0;
          //      d.outerRadius = r;
          //      return "translate(" + arc.centroid(d) + ")";        //this gives us a pair of coordinates like [50, 50]
          //    })
          //    .attr("text-anchor", "middle")                          //center the text on it's origin
          //    .text(function(d, i) { return data[i].label; });        //get the label from our original data array

          var legend = d3.select("#pie").append("svg")
                  .attr("class", "legend")
                  .attr("width", w)
                  .attr("height", 100)
                  .selectAll("g")
                  .data(color.domain().slice())
                  .enter().append("g")
                  .attr("transform", function (d, i) {
                      return "translate(10," + (i * 20 + 20) + ")";
                  });

          legend.append("rect")
                  .attr("width", 18)
                  .attr("height", 18)
                  .style("fill", color);

          legend.append("text")
                  .attr("x", 24)
                  .attr("y", 9)
                  .attr("dy", ".35em")
                  .text(function (d, i) {
                      return data[i].label + " (" + data[i].value + ")";
                  });

          var total = d3.select("#pie").append("svg")
                  .attr("width", w)
                  .attr("height", 20)
                  .attr("class", "total")
          total.append("text")
                  .attr("x", 33)
                  .attr("y", 9)
                  .attr("dy", ".35em")
                  .text(function (d) {
                      return "TOTAL (" + cnt + ")";
                  });
      }

      //call pie_chart function multiple times when page loads
      function addLoadEvent(func) {
          var oldonload = window.onload;
          if (typeof window.onload != 'function') {
              window.onload = func;
          } else {
              window.onload = function () {
                  if (oldonload) {
                      oldonload();
                  }
                  func();
              }
          }
      }

      addLoadEvent(function () {
          //dispatch chart rendering
          data = statuses;
          cnt = total;
          make_pie_chart(data, cnt);

      });
  </script>
