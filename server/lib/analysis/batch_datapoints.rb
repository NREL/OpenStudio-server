class Analysis::BatchDatapoints
  include Analysis::Core

  def initialize(analysis_id, analysis_job_id, options = {})
    # Setup the defaults for the Analysis.  Items in the root are typically used to control the running of
    #   the script below and are not necessarily persisted to the database.
    #   Options under problem will be merged together and persisted into the database.  The order of
    #   preference is objects in the database, objects passed via options, then the defaults below.
    #   Parameters posted in the API become the options hash that is passed into this initializer.
    defaults = {
      skip_init: false,
      run_data_point_filename: 'run_openstudio_workflow.rb',
      problem: {}
    }.with_indifferent_access # make sure to set this because the params object from rails is indifferent
    @options = defaults.deep_merge(options)

    @analysis_id = analysis_id
    @analysis_job_id = analysis_job_id
  end

  # Perform is the main method that is run in the background.  At the moment if this method crashes
  # it will be logged as a failed delayed_job and will fail after max_attempts.
  def perform
    @analysis = Analysis.find(@analysis_id)

    # get the analysis and report that it is running
    @analysis_job = Analysis::Core.initialize_analysis_job(@analysis, @analysis_job_id, @options)

    # reload the object (which is required) because the sub-documents (jobs) may have changed
    @analysis.reload

    # Create an instance for R
    @r = Rserve::Simpler.new # IS THIS REQUIRED? IT SHOULDN'T BE FOR NON-FANCY ANALYSIS TYPES
    begin
      Rails.logger.info "Initializing analysis for #{@analysis.name} with UUID of #{@analysis.uuid}"
      Rails.logger.info "Setting up R for #{self.class.name}"
      # TODO: need to move this to the module class
      @r.converse('setwd("/mnt/openstudio")')

      selected_variables = Variable.variables(@analysis.id)
      Rails.logger.info "Found #{selected_variables.count} non-default variables in the batch datapoint set."

      # generate the probabilities for all variables as column vectors
      @r.converse("print('starting batch_datapoints')")
      samples = nil

      Rails.logger.info 'Starting batch datapoint extraction.'

      # Iterate through each variable based on the method and add to the samples array in the form of
      # [{a: 1, b: true, c: 's'}, {a: 2, b: false, c: 'n'}]
      values_length = []
      values_set = {}

      selected_variables.each do |var|
        if var.map_discrete_hash_to_array.nil? || var.discrete_values_and_weights.empty?
          fail "no hash values and weight passed in variable #{var.name}"
        end
        values, weights = var.map_discrete_hash_to_array
        fail "'nil' value(s) found in variable #{var.id}. nil values not yet supported." if values.select{|v| v.nil?}.length != 0
        values_length = values_length << values.length
        values_set["#{var.id}".to_sym] = values
      end

      fail 'Length of discrete_values passed in variables was not equal across variables.' if values_length.uniq.length != 1

      # Create Datapoint Samples
      samples = []
      for i in 0..(values_length[0] - 1)
        instance = {}
        selected_variables.each do |var|
          instance["#{var.id}".to_sym] = values_set["#{var.id}".to_sym][i]
        end
        samples << instance
      end

      # Add the data points to the database
      isample = 0
      samples.uniq.each do |sample| # do this in parallel
        isample += 1
        dp_name = "Autogenerated #{isample}"
        dp = @analysis.data_points.new(name: dp_name)
        dp.set_variable_values = sample
        dp.save!

        Rails.logger.info("Generated data point #{dp.name} for analysis #{@analysis.name}")
      end

    ensure

      # Only set this data if the analysis was NOT called from another analysis
      unless @options[:skip_init]
        @analysis_job.end_time = Time.now
        @analysis_job.status = 'completed'
        @analysis_job.save!
        @analysis.reload
      end
      @analysis.save!

      Rails.logger.info "Finished running analysis '#{self.class.name}'"
    end
  end

  # Since this is a delayed job, if it crashes it will typically try multiple times.
  # Fix this to 1 retry for now.
  def max_attempts
    1
  end
end
